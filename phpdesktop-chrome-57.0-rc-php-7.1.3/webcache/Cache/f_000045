<pre class="cake-error"><a href="javascript:void(0);" onclick="document.getElementById('cakeErr61a83fe20d9f5-trace').style.display = (document.getElementById('cakeErr61a83fe20d9f5-trace').style.display == 'none' ? '' : 'none');"><b>Warning</b> (2)</a>: preg_match(): Delimiter must not be alphanumeric or backslash [<b>CORE\Cake\Model\Validator\CakeValidationRule.php</b>, line <b>279</b>]<div id="cakeErr61a83fe20d9f5-trace" class="cake-stack-trace" style="display: none;"><a href="javascript:void(0);" onclick="document.getElementById('cakeErr61a83fe20d9f5-code').style.display = (document.getElementById('cakeErr61a83fe20d9f5-code').style.display == 'none' ? '' : 'none')">Code</a> <a href="javascript:void(0);" onclick="document.getElementById('cakeErr61a83fe20d9f5-context').style.display = (document.getElementById('cakeErr61a83fe20d9f5-context').style.display == 'none' ? '' : 'none')">Context</a><pre id="cakeErr61a83fe20d9f5-code" class="cake-code-dump" style="display: none;"><code><span style="color: #000000"><span style="color: #0000BB">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">_valid&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">call_user_func_array</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'Validation'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">_rule</span><span style="color: #007700">),&nbsp;</span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">_ruleParams</span><span style="color: #007700">);</span></span></code>
<code><span style="color: #000000"><span style="color: #0000BB">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">}&nbsp;elseif&nbsp;(</span><span style="color: #0000BB">is_string</span><span style="color: #007700">(</span><span style="color: #0000BB">$validator</span><span style="color: #007700">[</span><span style="color: #DD0000">'rule'</span><span style="color: #007700">]))&nbsp;{</span></span></code>
<span class="code-highlight"><code><span style="color: #000000"><span style="color: #0000BB">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">_valid&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">preg_match</span><span style="color: #007700">(</span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">_rule</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$data</span><span style="color: #007700">[</span><span style="color: #0000BB">$field</span><span style="color: #007700">]);</span></span></code></span></pre><pre id="cakeErr61a83fe20d9f5-context" class="cake-context" style="display: none;">$field = &#039;estoque&#039;
$data = array(
	&#039;nome&#039; =&gt; &#039;a&#039;,
	&#039;tipo&#039; =&gt; &#039;a&#039;,
	&#039;valor&#039; =&gt; &#039;a&#039;,
	&#039;estoque&#039; =&gt; &#039;a&#039;,
	&#039;id&#039; =&gt; &#039;&#039;
)
$methods = array(
	&#039;findallorconditions&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;findAllOrconditions&#039;
	),
	&#039;buildparamsconditions&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;buildParamsConditions&#039;
	),
	&#039;__construct&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;__construct&#039;
	),
	&#039;implementedevents&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;implementedEvents&#039;
	),
	&#039;geteventmanager&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getEventManager&#039;
	),
	&#039;__call&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;__call&#039;
	),
	&#039;__isset&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;__isset&#039;
	),
	&#039;__get&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;__get&#039;
	),
	&#039;bindmodel&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;bindModel&#039;
	),
	&#039;unbindmodel&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;unbindModel&#039;
	),
	&#039;setsource&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;setSource&#039;
	),
	&#039;set&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;set&#039;
	),
	&#039;deconstruct&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;deconstruct&#039;
	),
	&#039;schema&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;schema&#039;
	),
	&#039;getcolumntypes&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getColumnTypes&#039;
	),
	&#039;getcolumntype&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getColumnType&#039;
	),
	&#039;hasfield&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;hasField&#039;
	),
	&#039;hasmethod&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;hasMethod&#039;
	),
	&#039;isvirtualfield&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;isVirtualField&#039;
	),
	&#039;getvirtualfield&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getVirtualField&#039;
	),
	&#039;create&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;create&#039;
	),
	&#039;clear&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;clear&#039;
	),
	&#039;read&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;read&#039;
	),
	&#039;field&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;field&#039;
	),
	&#039;savefield&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;saveField&#039;
	),
	&#039;save&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;save&#039;
	),
	&#039;updatecountercache&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;updateCounterCache&#039;
	),
	&#039;saveall&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;saveAll&#039;
	),
	&#039;savemany&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;saveMany&#039;
	),
	&#039;validatemany&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;validateMany&#039;
	),
	&#039;saveassociated&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;saveAssociated&#039;
	),
	&#039;validateassociated&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;validateAssociated&#039;
	),
	&#039;updateall&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;updateAll&#039;
	),
	&#039;delete&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;delete&#039;
	),
	&#039;deleteall&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;deleteAll&#039;
	),
	&#039;exists&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;exists&#039;
	),
	&#039;hasany&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;hasAny&#039;
	),
	&#039;find&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;find&#039;
	),
	&#039;buildquery&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;buildQuery&#039;
	),
	&#039;resetassociations&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;resetAssociations&#039;
	),
	&#039;isunique&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;isUnique&#039;
	),
	&#039;query&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;query&#039;
	),
	&#039;validates&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;validates&#039;
	),
	&#039;invalidfields&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;invalidFields&#039;
	),
	&#039;invalidate&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;invalidate&#039;
	),
	&#039;isforeignkey&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;isForeignKey&#039;
	),
	&#039;escapefield&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;escapeField&#039;
	),
	&#039;getid&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getID&#039;
	),
	&#039;getlastinsertid&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getLastInsertID&#039;
	),
	&#039;getinsertid&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getInsertID&#039;
	),
	&#039;setinsertid&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;setInsertID&#039;
	),
	&#039;getnumrows&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getNumRows&#039;
	),
	&#039;getaffectedrows&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getAffectedRows&#039;
	),
	&#039;setdatasource&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;setDataSource&#039;
	),
	&#039;getdatasource&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getDataSource&#039;
	),
	&#039;associations&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;associations&#039;
	),
	&#039;getassociated&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;getAssociated&#039;
	),
	&#039;joinmodel&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;joinModel&#039;
	),
	&#039;beforefind&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;beforeFind&#039;
	),
	&#039;afterfind&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;afterFind&#039;
	),
	&#039;beforesave&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;beforeSave&#039;
	),
	&#039;aftersave&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;afterSave&#039;
	),
	&#039;beforedelete&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;beforeDelete&#039;
	),
	&#039;afterdelete&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;afterDelete&#039;
	),
	&#039;beforevalidate&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;beforeValidate&#039;
	),
	&#039;aftervalidate&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;afterValidate&#039;
	),
	&#039;onerror&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;onError&#039;
	),
	&#039;validator&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;validator&#039;
	),
	&#039;tostring&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;toString&#039;
	),
	&#039;requestaction&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;requestAction&#039;
	),
	&#039;dispatchmethod&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;dispatchMethod&#039;
	),
	&#039;log&#039; =&gt; array(
		(int) 0 =&gt; object(Produto) {},
		(int) 1 =&gt; &#039;log&#039;
	)
)
$validator = array(
	&#039;rule&#039; =&gt; &#039;isNumeric&#039;,
	&#039;required&#039; =&gt; null,
	&#039;allowEmpty&#039; =&gt; null,
	&#039;on&#039; =&gt; null,
	&#039;last&#039; =&gt; true,
	&#039;message&#039; =&gt; &#039;Informe somente numeros&#039;
)
$rule = &#039;isnumeric&#039;</pre><pre class="stack-trace">preg_match - [internal], line ??
CakeValidationRule::process() - CORE\Cake\Model\Validator\CakeValidationRule.php, line 279
CakeValidationSet::validate() - CORE\Cake\Model\Validator\CakeValidationSet.php, line 135
ModelValidator::errors() - CORE\Cake\Model\ModelValidator.php, line 268
ModelValidator::validates() - CORE\Cake\Model\ModelValidator.php, line 99
Model::validates() - CORE\Cake\Model\Model.php, line 3502
Model::_doSave() - CORE\Cake\Model\Model.php, line 1838
Model::save() - CORE\Cake\Model\Model.php, line 1760
ProdutosController::add() - APP\Controller\ProdutosController.php, line 58
ReflectionMethod::invokeArgs() - [internal], line ??
Controller::invokeAction() - CORE\Cake\Controller\Controller.php, line 499
Dispatcher::_invoke() - CORE\Cake\Routing\Dispatcher.php, line 193
Dispatcher::dispatch() - CORE\Cake\Routing\Dispatcher.php, line 167
[main] - APP\webroot\index.php, line 117</pre></div></pre><!DOCTYPE html>
<html>
    <head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>

		Produtos</title>
	<!-- Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

<!-- Styles -->
<style>
    /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}a{background-color:transparent}[hidden]{display:none}html{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5}*,:after,:before{box-sizing:border-box;border:0 solid #e2e8f0}a{color:inherit;text-decoration:inherit}svg,video{display:block;vertical-align:middle}video{max-width:100%;height:auto}.bg-white{--bg-opacity:1;background-color:#fff;background-color:rgba(255,255,255,var(--bg-opacity))}.bg-gray-100{--bg-opacity:1;background-color:#f7fafc;background-color:rgba(247,250,252,var(--bg-opacity))}.border-gray-200{--border-opacity:1;border-color:#edf2f7;border-color:rgba(237,242,247,var(--border-opacity))}.border-t{border-top-width:1px}.flex{display:flex}.grid{display:grid}.hidden{display:none}.items-center{align-items:center}.justify-center{justify-content:center}.font-semibold{font-weight:600}.h-5{height:1.25rem}.h-8{height:2rem}.h-16{height:4rem}.text-sm{font-size:.875rem}.text-lg{font-size:1.125rem}.leading-7{line-height:1.75rem}.mx-auto{margin-left:auto;margin-right:auto}.ml-1{margin-left:.25rem}.mt-2{margin-top:.5rem}.mr-2{margin-right:.5rem}.ml-2{margin-left:.5rem}.mt-4{margin-top:1rem}.ml-4{margin-left:1rem}.mt-8{margin-top:2rem}.ml-12{margin-left:3rem}.-mt-px{margin-top:-1px}.max-w-6xl{max-width:72rem}.min-h-screen{min-height:100vh}.overflow-hidden{overflow:hidden}.p-6{padding:1.5rem}.py-4{padding-top:1rem;padding-bottom:1rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.pt-8{padding-top:2rem}.fixed{position:fixed}.relative{position:relative}.top-0{top:0}.right-0{right:0}.shadow{box-shadow:0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px 0 rgba(0,0,0,.06)}.text-center{text-align:center}.text-gray-200{--text-opacity:1;color:#edf2f7;color:rgba(237,242,247,var(--text-opacity))}.text-gray-300{--text-opacity:1;color:#e2e8f0;color:rgba(226,232,240,var(--text-opacity))}.text-gray-400{--text-opacity:1;color:#cbd5e0;color:rgba(203,213,224,var(--text-opacity))}.text-gray-500{--text-opacity:1;color:#a0aec0;color:rgba(160,174,192,var(--text-opacity))}.text-gray-600{--text-opacity:1;color:#718096;color:rgba(113,128,150,var(--text-opacity))}.text-gray-700{--text-opacity:1;color:#4a5568;color:rgba(74,85,104,var(--text-opacity))}.text-gray-900{--text-opacity:1;color:#1a202c;color:rgba(26,32,44,var(--text-opacity))}.underline{text-decoration:underline}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.w-5{width:1.25rem}.w-8{width:2rem}.w-auto{width:auto}.grid-cols-1{grid-template-columns:repeat(1,minmax(0,1fr))}@media (min-width:640px){.sm\:rounded-lg{border-radius:.5rem}.sm\:block{display:block}.sm\:items-center{align-items:center}.sm\:justify-start{justify-content:flex-start}.sm\:justify-between{justify-content:space-between}.sm\:h-20{height:5rem}.sm\:ml-0{margin-left:0}.sm\:px-6{padding-left:1.5rem;padding-right:1.5rem}.sm\:pt-0{padding-top:0}.sm\:text-left{text-align:left}.sm\:text-right{text-align:right}}@media (min-width:768px){.md\:border-t-0{border-top-width:0}.md\:border-l{border-left-width:1px}.md\:grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}}@media (min-width:1024px){.lg\:px-8{padding-left:2rem;padding-right:2rem}}@media (prefers-color-scheme:dark){.dark\:bg-gray-800{--bg-opacity:1;background-color:#2d3748;background-color:rgba(45,55,72,var(--bg-opacity))}.dark\:bg-gray-900{--bg-opacity:1;background-color:#1a202c;background-color:rgba(26,32,44,var(--bg-opacity))}.dark\:border-gray-700{--border-opacity:1;border-color:#4a5568;border-color:rgba(74,85,104,var(--border-opacity))}.dark\:text-white{--text-opacity:1;color:#fff;color:rgba(255,255,255,var(--text-opacity))}.dark\:text-gray-400{--text-opacity:1;color:#cbd5e0;color:rgba(203,213,224,var(--text-opacity))}.dark\:text-gray-500{--tw-text-opacity:1;color:#6b7280;color:rgba(107,114,128,var(--tw-text-opacity))}}
</style>

<style>
    body {
        font-family: 'Nunito', sans-serif;
    }
</style>
<link rel="canonical" href="https://getbootstrap.com/docs/5.0/examples/offcanvas-navbar/">
 <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css">
<style>
    .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
    }

    @media (min-width: 768px) {
        .bd-placeholder-img-lg {
            font-size: 3.5rem;
        }
    }
</style>	
    </head>
    <body class="bg-light">
        <main class="container">    
            <div class="card">

                <ul class="nav nav-pills">
                    <li class="nav-item">
                        <a class="nav-link">
                            Produtos
                        </a>
                        <ul>
                            <li><a class="dropdown-item" href="/index.php/">Listar</a></li>
                            <li><a class="dropdown-item"  href="/index.php/produtos/add">Cadastrar</a></li>
                        </ul>
                    </li>

                    <li class="nav-item ms-auto p-2 bd-highlight">
                       2 - usuario                    </li>
                    <li>
                        <button class="nav-item">
                            <a href = /index.php/users/logout>     
                                sair
                                <i class="bi bi-power"></i>
                            </a>
                        </button>
                    </li>
                </ul>
            </div>
            <div class="my-3 p-3 bg-body rounded shadow-sm">

        <div id="flashMessage" class="message error">Produto não pode ser salvo, tente novamento.</div>
	
<h2>Cadastro de Produto</h2>
<form action="/index.php/produtos/add" class="form-group" id="ProdutoAddForm" method="post" accept-charset="utf-8"><div style="display:none;"><input type="hidden" name="_method" value="POST"/></div><div class="mb-5">
        <div class="row mb-3">

        <label for="nome" class="col-sm-2 col-form-label">Codigo</label>
        <div class="col-sm-5">
                    </div>
    </div>
        <div class="row mb-3">

        <label for="nome" class="col-sm-2 col-form-label">Nome</label>
        <div class="col-sm-5">
                <div class="input text"><input name="data[Produto][nome]" class="form-control" type="text" value="a" id="ProdutoNome"/></div>        </div>
    </div> 
    <div class="row mb-3">
        <label for="cpf" class="col-sm-2 col-form-label">Tipo</label>
        <div class="col-sm-5">
                <div class="input text"><input name="data[Produto][tipo]" class="form-control" type="text" value="a" id="ProdutoTipo"/></div>        </div>
    </div>
        <div class="row mb-3">
        <label for="cpf" class="col-sm-2 col-form-label">Valor</label>
        <div class="col-sm-5">
            <div class="input text"><input name="data[Produto][valor]" class="form-control" type="text" value="a" id="ProdutoValor"/></div>        </div>
    </div>
         <div class="row mb-3">
        <label for="cpf" class="col-sm-2 col-form-label">Estoque</label>
        <div class="col-sm-5">
                    <div class="input text error"><input name="data[Produto][estoque]" class="form-control form-error" type="text" value="a" id="ProdutoEstoque"/><div class="error-message">Informe somente numeros</div></div>        </div>
    </div>

    </div>

<input type="hidden" name="data[Produto][id]" value="" id="ProdutoId"/><div class="submit"><input type="submit" value="Salvar"/></div></form>
<hr>            </div>
                        </main>
    </body>
</html>